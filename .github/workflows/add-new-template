# Workflow that adds a new Template for Power Platform (Power House) into the GIT Repo & raises a PR (shanep)
name: Add new template and commit PR

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: "The solution name with prefix. Not the display name, but the exact unique name of the solution. (Examples: mpa_ITBase, mpa_Kudos, etc.)"
        required: true
        default: 'mpa_'
      user_name: 
        description: "User name for the commit"
        required: true
        default: 'tshanep'
      dev_env_url: 
        description: "The Instance URL of the Dev Environment for this solution. You can get this from Session details. Example: https://aicdev4.crm.dynamics.com/"
        required: true
      solution_type:
        description: "Enter 'BASE' or 'APP'."
        required: true
      dependent_on_solution_name:
        description: "If solution_type is APP, enter the exact unique name of the base solution this depends on. (Example: mpa_ITBase). Leave empty if it is a BASE solution."
        required: false
permissions:
  contents: write

jobs:
  check-folder-and-run-actions:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # Get Current DateTime
      - id: date
        name: Get current datetime
        run: |
          $datetime = $(Get-Date -Format "yyyy-MM-ddTHH:mm:ss")
          echo "datetime=$datetime" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

      # Install Node.js (required to install Power Platform CLI)
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Install Power Platform CLI
      - name: Install Power Platform CLI
        run: npm install -g @microsoft/powerplatform-cli

      # Setup Auth with the Correct Environment
      - name: Auth with Source Environment
        run: |
          pac auth clear
          pac auth create --url ${{ github.event.inputs.dev_env_url }} --username ${{ secrets.AUTOMATION_USERNAME }} --password ${{ secrets.AUTOMATION_PASSWORD }} --name DevEnv --cloud Public

      # Checkout the main branch
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: 'main'
      
      # Check if the folder exists
      - name: Check for specific folder
        id: check_folder
        run: |
          $folderPath = "solutions/${{ github.event.inputs.solution_name }}"
          if (Test-Path $folderPath) {
            Write-Host "The solution seems to already exist in the Git Repo - this workflow is only for new solutions being added to Git the first time."
            echo "FOLDER_EXISTS=true" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 0 # Stops the workflow gracefully
          } else {
            Write-Host "Solution folder does not exist - will proceed to initialize the solution."
            echo "FOLDER_EXISTS=false" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      # Navigate to the Solutions folder and initialize the solution
      - name: Initialize Power Platform Solution
      env:
        PUBLISHER_NAME: PowerAccelerator
        PUBLISHER_PREFIX: mpa
        SOLUTION_DIRECTORY: ${{ github.event.inputs.solution_name }}
      run: |
        cd Solutions
        pac solution init --publisher-name $env:PUBLISHER_NAME --publisher-prefix $env:PUBLISHER_PREFIX --outputDirectory .\$env:SOLUTION_DIRECTORY

      # Add SolutionPackageType of BOTH to <PropertyGroup> in cdsproj
      - name: Add SolutionPackageType node to XML
        run: |
          # Specify the path to the XML file
          $xmlPath = "Solutions/${{ github.event.inputs.solution_name }}/${{ github.event.inputs.solution_name }}.cdsproj"

          # Load the XML file
          $xml = New-Object System.Xml.XmlDocument
          $xml.Load($xmlPath)

          # Create the new node
          $newNode = $xml.CreateElement("SolutionPackageType", $xml.DocumentElement.NamespaceURI)
          $newNode.InnerText = "Both"

          # Find the target PropertyGroup node
          $propertyGroup = $xml.SelectSingleNode("//ns:PropertyGroup", $namespaceManager)

          # Add the new node to the PropertyGroup
          $propertyGroup.AppendChild($newNode)

          # Save the updated XML back to the file
          $xml.Save($xmlPath)
        shell: pwsh
        env:
          # Define the XML namespace used in your XML file
          namespace: http://schemas.microsoft.com/developer/msbuild/2003

      - name: Add SolutionsToBuild node to main solutions.proj
        run: |
          # Define the path to the XML file
          $xmlPath = "Solutions/solutions.proj"

          # Load the XML file
          $xml = New-Object System.Xml.XmlDocument
          $xml.PreserveWhitespace = $true
          $xml.Load($xmlPath)

          # Create the new node
          $newNode = $xml.CreateElement("SolutionsToBuild", $xml.DocumentElement.NamespaceURI)
          $newNode.SetAttribute("Include", "${{ github.event.inputs.solution_name }}/${{ github.event.inputs.solution_name }}.cdsproj")

          # Find the target ItemGroup node
          $itemGroup = $xml.SelectSingleNode("//ns:ItemGroup", $namespaceManager)

          # Add the new node to the ItemGroup
          $itemGroup.AppendChild($newNode)

          # Save the updated XML back to the file
          $xml.Save($xmlPath)
        shell: pwsh
        env:
          # Define the XML namespace used in your XML file
          namespace: http://schemas.microsoft.com/developer/msbuild/2003
